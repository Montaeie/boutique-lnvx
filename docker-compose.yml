version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: boutique-lnvx-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: boutique-lnvx-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    container_name: boutique-lnvx-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      REDIS_URL: redis://redis:6379
      PORT: 9000
      STORE_CORS: http://localhost:8000
      ADMIN_CORS: http://localhost:7000,http://localhost:7001
      JWT_SECRET: your_jwt_secret
      COOKIE_SECRET: your_cookie_secret
    volumes:
      - ./boutique-lnvx:/app
      - /app/node_modules

  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    container_name: boutique-lnvx-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: http://backend:9000
      NEXT_PUBLIC_BASE_URL: http://localhost:8000
      MEDUSA_BACKEND_URL: http://backend:9000
    volumes:
      - ./boutique-lnvx-storefront:/app
      - /app/node_modules

volumes:
  postgres_data:
  redis_data:
